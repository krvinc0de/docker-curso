#ejemplo de multicontainer
#base de datos mongodb con un cliente web y una app web y ejemplo de variables de entorno .env

#version de docker
version: '3'

#servicios (contenedores) a correr
services:
  #nombre del servicio
  mongodb: 
    #nombre del contenedor
    container_name: ${MONGODB_NAME}
    image: mongo:6.0
    volumes:
      - poke-vol:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    command: ['--auth']
    ports:
      - 27017:27017
    restart: always

  mongoExpress:
    #depende del servicio:
    depends_on:
      - mongodb
    container_name: mongo_express
    image: mongo-express:1.0.0-alpha.4
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGODB_NAME}
    ports:
      - 80:8081
    restart: always

  appPokemon:
    depends_on:
      - mongodb
    container_name: appPokemon
    image: klerith/pokemon-nest-app:1.0.0
    environment:
      - MONGODB=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGODB_NAME}:27017
      - DB_NAME=${MONGODB_NAME}
    ports:
      - 8081:3000
    restart: always

#indica si el volumen a usar esta creado. true = volumen creado, false = volumen no creado
volumes:
  poke-vol:
    external: false